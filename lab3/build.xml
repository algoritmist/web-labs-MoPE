<?xml version="1.0" encoding="UTF-8"?>
<project name="${ant.project.name}" basedir="." default="build" xmlns:ivy="antlib:org.apache.ivy.ant">
    <property file="build.properties"/>

    <path id="lib.main.path">
        <fileset dir="${lib.main.dir}" includes="**/*.jar"/>
    </path>

    <path id="lib.test.path">
        <path refid="lib.main.path"/>
        <fileset dir="${lib.test.dir}" includes="**/*.jar"/>
    </path>

    <path id="lib.junit.path">
        <fileset dir="${lib.test.dir}" includes="**/junit*.jar"/>
    </path>

    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <target name="resolve" description="разрешение зависимостей">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
    </target>

    <target name="compile" depends="resolve" description="компиляция исходных кодов проекта">
        <echo>Компиляция основного кода...</echo>
        <mkdir dir="${build.classes.dir}"/>
        <javac srcdir="${src.main.dir}" destdir="${build.classes.dir}" includeantruntime="false">
            <classpath refid="lib.main.path"/>
        </javac>
        <echo>Компиляция тестов</echo>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${src.test.dir}" destdir="${test.classes.dir}" includeantruntime="false">
            <exclude name="**/ResultsBeanTest.java"/>
            <classpath>
                <path refid="lib.test.path"/>
                <pathelement location="${build.classes.dir}"/>
            </classpath>
        </javac>
    </target>
    <target name="build" depends="compile"
            description="компиляция исходных кодов проекта и их упаковка в исполняемый jar-архив">
        <mkdir dir="${build.jar.dir}"/>
        <echo>Упаковка в jar архив...</echo>
        <jar destfile="${build.jar.dir}/${ant.project.jarname}.jar" basedir="${build.classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${ant.project.main-class}"/>
            </manifest>
        </jar>
    </target>
    <target name="clean" description="удаление скомпилированных классов проекта и всех временных файлов">
        <echo>Удаление директории с классами...</echo>
        <delete dir="${build.dir}"/>
        <echo>Удаление директории с тестами...</echo>
        <delete dir="${test.dir}"/>
        <echo>Удаление архивов...</echo>
        <delete dir="${build.jar.dir}"/>
        <echo>Удаление зависимостей...</echo>
        <delete dir="${lib.dir}"/>
    </target>
    <target name="test" depends="build"
            description="запуск junit-тестов проекта. Перед запуском тестов необходимо осуществить сборку проекта">
        <mkdir dir="${test.report.dir}"/>
        <echo>Запуск тестов...</echo>
        <junitlauncher printsummary="true">
            <classpath>
                <path refid="lib.test.path"/>
                <pathelement location="${build.dir}"/>
                <pathelement location="${build.classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <testclasses outputdir="${test.report.dir}">
                <fileset dir="${test.classes.dir}">
                    <include name="**/*Test*.class"/>
                </fileset>
                <listener type="legacy-plain"
                          sendSysOut="true"
                          sendSysErr="true"/>
                <fork/>
            </testclasses>
        </junitlauncher>
    </target>
    <target name="scp" depends="build"
            description="перемещение собранного проекта по scp на выбранный сервер по завершению сборки">

        <input message="Введите пароль для отправки на сервер: " addproperty="scp.password">
            <handler type="secure"/>
        </input>
        <echo>Архив копируется на удаленный сервер...</echo>
        <scp file="${build.jar.dir}/${ant.project.jarname}.jar"
             todir="${scp.user}@${scp.host}:${scp.dir}"
             password="${scp.password}"
             port="${scp.port}"
             trust="true"/>
    </target>
    <target name="xml" description="валидация всех xml-файлов в проекте">
        <echo>Валидация XML-файлов</echo>
        <xmlvalidate lenient="yes" warn="yes">
            <fileset dir="." includes="**/*.xml"/>
        </xmlvalidate>
        <echo>Валидация прошла успешно</echo>
    </target>
    <target name="native2ascii" description="преобразование native2ascii для копий файлов локализации">

    </target>
    <target name="history" description="загружается первая успешная версия из git">
        <trycatch>
            <try>
                <runtarget target="compile"/>
                <echo>Компиляция завершена...</echo>
            </try>
            <catch>
                <exec executable="git" outpudproperty="git_commit_count">
                    <arg line="rev-list master --all HEAD"/>
                </exec>
                <if>
                    <not>
                        <equals arg1="${git_commit_count}" arg2="0"/>
                    </not>
                    <then>
                        <exec executable="git">
                            <arg line="checkout HEAD~1"/>
                        </exec>
                        <runtarget target="history"/>
                    </then>
                </if>
            </catch>
        </trycatch>
    </target>
    <target name="diff"
            description="осуществляет проверку состояния рабочей копии, и, если изменения не касаются классов, указанных в файле параметров выполняет commit в репозиторий svn">

    </target>
    <target name="team" depends="build"
            description="осуществляет получение из svn-репозитория 3 предыдущих ревизий, их сборку (по аналогии с основной) и упаковку получившихся jar-файлов в zip-архив">

    </target>
    <target name="alt" depends="build"
            description="оздаёт альтернативную версию программы с измененными именами переменных и классов (используя задание replace/replaceregexp в файлах параметров) и упаковывает её в jar-архив.">

    </target>
</project>